# source: http://localhost:3000/graphql
# timestamp: Thu Apr 12 2018 23:35:32 GMT-0400 (EDT)

type Author implements AuthorContract {
  id: ID
  name: String
  isFavorited: Boolean
  isBookmarked: Boolean
  poems: [PoemDetails]
}

type AuthorConnection {
  edges: [AuthorEdge]
  pageInfo: PageInfo!
}

interface AuthorContract {
  id: ID
  name: String
  isFavorited: Boolean
  isBookmarked: Boolean
}

type AuthorDetails implements AuthorContract {
  id: ID
  name: String
  isFavorited: Boolean
  isBookmarked: Boolean
}

type AuthorEdge {
  cursor: String!
  node: Author
}

type AuthorPrefs {
  authorId: ID!
  isFavorited: Boolean!
  isBookmarked: Boolean!
}

input AuthorPrefsInput {
  authorId: ID!
  isFavorited: Boolean!
  isBookmarked: Boolean!
}

type Mutation {
  authorLibraryAdd(input: AuthorPrefsInput!): AuthorPrefs
  poemLibraryAdd(input: PoemPrefsInput!): PoemPrefs
  authorLibraryUpdate(input: AuthorPrefsInput!): AuthorPrefs
  poemLibraryUpdate(input: PoemPrefsInput!): PoemPrefs
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Poem implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  isFavorited: Boolean
  isBookmarked: Boolean
  author: AuthorDetails
}

type PoemConnection {
  edges: [PoemEdge]
  pageInfo: PageInfo!
}

interface PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  isFavorited: Boolean
  isBookmarked: Boolean
}

type PoemDetails implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  isFavorited: Boolean
  isBookmarked: Boolean
}

type PoemEdge {
  cursor: String!
  node: Poem
}

type PoemPrefs {
  poemId: ID!
  isFavorited: Boolean!
  isBookmarked: Boolean!
}

input PoemPrefsInput {
  poemId: ID!
  isFavorited: Boolean!
  isBookmarked: Boolean!
}

type Query {
  authorLibrary: [Author]
  poemLibrary: [Poem]
  user: User
  author(id: ID): Author
  authorList(first: Int, after: String, last: Int, before: String, sortBy: [String]): AuthorConnection
  poem(id: ID): Poem
  poemList(first: Int, after: String, last: Int, before: String, sortBy: [String]): PoemConnection
}

type User {
  id: ID
  email: String
}
