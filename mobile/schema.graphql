# source: http://0.0.0.0:3000/graphql
# timestamp: Tue Jul 03 2018 20:36:05 GMT-0400 (EDT)

type Author implements AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  viewedAt: Date
  poems: [PoemDetails]
}

enum AuthorCategory {
  Default
  Recents
  Library
}

type AuthorConnection {
  edges: [AuthorEdge]
  pageInfo: PageInfo!
}

interface AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  viewedAt: Date
}

type AuthorDetails implements AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  viewedAt: Date
}

type AuthorEdge {
  cursor: String!
  node: Author
}

input AuthorInput {
  id: ID!
  inLibrary: Boolean!
}

scalar Date

type Mutation {
  userSignInAnon(input: UserAnonInput!): User
  userSignInSocial(input: UserSocialInput!): User
  authorUpsert(input: AuthorInput!): Author
  poemUpsert(input: PoemInput!): Poem
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Poem implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  viewedAt: Date
  author: AuthorDetails
}

enum PoemCategory {
  Default
  Recents
  Library
}

type PoemConnection {
  edges: [PoemEdge]
  pageInfo: PageInfo!
}

interface PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  viewedAt: Date
}

type PoemDetails implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  viewedAt: Date
}

type PoemEdge {
  cursor: String!
  node: Poem
}

input PoemInput {
  id: ID!
  inLibrary: Boolean!
}

type Query {
  user: User
  author(id: ID): Author
  authorList(from: AuthorCategory!, search: String, first: Int, after: String, last: Int, before: String): AuthorConnection
  poem(id: ID): Poem
  poemList(from: PoemCategory!, search: String, first: Int, after: String, last: Int, before: String): PoemConnection
}

enum SocialProvider {
  Facebook
  Google
  Twitter
}

type User {
  id: ID
  email: String
}

input UserAnonInput {
  clientId: ID!
}

input UserSocialInput {
  clientId: ID!
  provider: SocialProvider!
  token: String!
}
