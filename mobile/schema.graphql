# source: http://159.89.125.208/graphql
# timestamp: Fri May 04 2018 20:21:46 GMT-0400 (EDT)

type Author implements AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  poems: [PoemDetails]
}

type AuthorConnection {
  edges: [AuthorEdge]
  pageInfo: PageInfo!
}

interface AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
}

type AuthorDetails implements AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
}

type AuthorEdge {
  cursor: String!
  node: Author
}

input AuthorPrefsInput {
  authorId: ID!
  inLibrary: Boolean!
  viewedAt: Date!
}

scalar Date

type Mutation {
  authorLibraryUpsert(input: AuthorPrefsInput!): Boolean
  poemLibraryUpsert(input: PoemPrefsInput!): Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Poem implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  author: AuthorDetails
}

type PoemConnection {
  edges: [PoemEdge]
  pageInfo: PageInfo!
}

interface PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
}

type PoemDetails implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
}

type PoemEdge {
  cursor: String!
  node: Poem
}

input PoemPrefsInput {
  poemId: ID!
  inLibrary: Boolean!
  viewedAt: Date!
}

type Query {
  authorLibrary(first: Int, after: String, last: Int, before: String): AuthorConnection
  poemLibrary(first: Int, after: String, last: Int, before: String): PoemConnection
  user: User
  author(id: ID): Author
  authorList(first: Int, after: String, last: Int, before: String): AuthorConnection
  poem(id: ID): Poem
  poemList(first: Int, after: String, last: Int, before: String): PoemConnection
}

type User {
  id: ID
  email: String
}
