extend type Query {
  author(id: ID!): Author
  authorDiscover: Author
  authorLibrary(
    search: String
    first: Int
    after: String
    last: Int
    before: String
  ): AuthorConnection
  authorRecents(
    search: String
    first: Int
    after: String
    last: Int
    before: String
  ): AuthorConnection
}

extend type Mutation {
  authorView(id: ID!): Author
}

type AuthorConnection {
  edges: [AuthorEdge]
  pageInfo: PageInfo
}

type AuthorEdge {
  cursor: String
  node: Author
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type Author implements AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  inLibraryAt: Date
  viewedAt: Date
  poems: [PoemDetails]
}

type AuthorDetails implements AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  inLibraryAt: Date
  viewedAt: Date
}

interface AuthorContract {
  id: ID
  name: String
  inLibrary: Boolean
  inLibraryAt: Date
  viewedAt: Date
}
