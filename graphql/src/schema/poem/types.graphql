extend type Query {
  poem(id: ID): Poem
  poemList(
    from: PoemCategory!
    search: String
    first: Int
    after: String
    last: Int
    before: String
  ): PoemConnection
}

extend type Mutation {
  poemUpsert(input: PoemInfoInput!): PoemInfo
}

type PoemConnection {
  edges: [PoemEdge]
  pageInfo: PageInfo!
}

type PoemEdge {
  cursor: String!
  node: Poem
}

type Poem implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  viewedAt: Date
  author: AuthorDetails
}

type PoemDetails implements PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  viewedAt: Date
}

type PoemInfo {
  id: ID
  inLibrary: Boolean
  viewedAt: Date
}

interface PoemContract {
  id: ID
  title: String
  teaser: [String]
  classification: String
  region: String
  period: String
  lines: [String]
  keywords: [String]
  inLibrary: Boolean
  viewedAt: Date
}

input PoemInfoInput {
  id: ID!
  inLibrary: Boolean!
}

enum PoemCategory {
  Default
  Recents
  Library
}
